in_source: |-
  org 0
  data:
      S: .word "Hello, world!", 0
  org 10
  start:
      mov esi, S ; загружаем адрес строки в eax
  loop:
      cmp (esi), 0 ; проверяем, что не достигли конца строки
      jz end_loop ; иначе заканчиваем цикл
      mov eax, (esi) ; записываем символ в аккумулятор
      out ; сохраняем символ из eax в устройстве вывода (2047)
      inc esi ; инкрементируем счётчик
      jmp loop ; продолжаем цикл
  end_loop:
      hlt ; останавливаем цикл
in_stdin: |

out_code: |-
  {
  	"data_memory": [
  		{"index": 0, "value": 72},
  		{"index": 1, "value": 101},
  		{"index": 2, "value": 108},
  		{"index": 3, "value": 108},
  		{"index": 4, "value": 111},
  		{"index": 5, "value": 44},
  		{"index": 6, "value": 32},
  		{"index": 7, "value": 119},
  		{"index": 8, "value": 111},
  		{"index": 9, "value": 114},
  		{"index": 10, "value": 108},
  		{"index": 11, "value": 100},
  		{"index": 12, "value": 33},
  		{"index": 13, "value": 0}
  	],
  	"instruction_memory": [
  		{"index": 10, "opcode": "mov", "operand1": "esi", "operand2": "0"},
  		{"index": 11, "opcode": "cmp", "operand1": "(esi)", "operand2": "0"},
  		{"index": 12, "opcode": "jz", "operand1": 17},
  		{"index": 13, "opcode": "mov", "operand1": "eax", "operand2": "(esi)"},
  		{"index": 14, "opcode": "mov", "operand1": "(2047)", "operand2": "eax"},
  		{"index": 15, "opcode": "inc", "operand1": "esi"},
  		{"index": 16, "opcode": "jmp", "operand1": 11},
  		{"index": 17, "opcode": "hlt"}
  	]
  }

out_stdout: |
  source LoC: 15 code instr: 2
  ============================================================
  Hello, world!
  instr_counter:  81 ticks: 122

out_log: |
  INFO     root:machine.py:427 output_buffer: 'Hello, world!'
